"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import os
import dj_database_url  # Added
from dotenv import load_dotenv
# import yaml  # Removed: No longer using config.yaml

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')  # Added

# --- Configuration from Environment Variables ---
# APP_MODE is now directly loaded from .env
APP_MODE = os.getenv('APP_MODE')
if not APP_MODE:
    # Fallback or raise error if APP_MODE is critical and not set
    # For now, let's assume it might be set by the environment directly
    # or we can provide a default if .env is missing the entry.
    # If it's absolutely required from .env, you might raise an error here.
    print("Warning: APP_MODE not found in .env. Defaulting to 'development'.")
    APP_MODE = 'development' # Defaulting to development if not set
    # If critical, uncomment below:
    # raise ValueError("APP_MODE must be set in the .env file (e.g., 'development' or 'production').")

if APP_MODE not in ['development', 'production']:
    raise ValueError(
        f"Invalid APP_MODE '{APP_MODE}'. Must be 'development' or 'production'.")

# GEMINI_MODEL_NAME is now directly loaded from .env
GEMINI_MODEL_NAME = os.getenv('GEMINI_MODEL_NAME', 'gemini-1.0-pro') # Default model if not in .env
# --- End Configuration from Environment Variables ---

# Gemini API Key (from .env)
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if not GEMINI_API_KEY:
    print("Warning: GEMINI_API_KEY not found in environment variables.")
    # Consider: raise ImproperlyConfigured("GEMINI_API_KEY must be set in environment variables.")

# Gemini Model Name (now directly from .env, already assigned above)
# GEMINI_MODEL_NAME = GEMINI_MODEL_NAME_FROM_CONFIG # This line is removed as GEMINI_MODEL_NAME is set from os.getenv


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
if not SECRET_KEY:
    if APP_MODE == 'development':
        from django.core.management.utils import get_random_secret_key
        SECRET_KEY = get_random_secret_key()
        print(
            f"Warning: DJANGO_SECRET_KEY not set, generated a temporary one for development: {SECRET_KEY}")
    else:
        raise ValueError(
            "DJANGO_SECRET_KEY environment variable must be set in production.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (APP_MODE == 'development')

ALLOWED_HOSTS = []
ALLOWED_HOSTS_STR = os.getenv('DJANGO_ALLOWED_HOSTS')

if ALLOWED_HOSTS_STR:
    ALLOWED_HOSTS.extend([host.strip()
                         for host in ALLOWED_HOSTS_STR.split(',')])

if APP_MODE == 'development':
    # Ensure common development hosts are always present in development mode
    # This avoids issues if DJANGO_ALLOWED_HOSTS is set for other dev purposes (e.g. ngrok)
    # but doesn't include localhost.
    dev_hosts = ['localhost', '127.0.0.1']
    for host in dev_hosts:
        if host not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(host)
    # If ALLOWED_HOSTS was empty and it's development, ensure it has the defaults
    if not ALLOWED_HOSTS:
        ALLOWED_HOSTS = ['localhost', '127.0.0.1']

elif not ALLOWED_HOSTS:  # APP_MODE == 'production' and no hosts configured via env var
    # In production, if DJANGO_ALLOWED_HOSTS was not set (or was empty), ALLOWED_HOSTS would be empty.
    # This is a critical misconfiguration for production.
    # You could also load from APP_CONFIG.get('allowed_hosts', []) here as an alternative.
    raise ValueError(
        "DJANGO_ALLOWED_HOSTS environment variable must be set and non-empty in production.")

# Remove empty strings that might result from an empty DJANGO_ALLOWED_HOSTS env var
ALLOWED_HOSTS = [host for host in ALLOWED_HOSTS if host]

if APP_MODE == 'production' and not ALLOWED_HOSTS:
    # Final check: if it's production and somehow ALLOWED_HOSTS ended up empty (e.g. DJANGO_ALLOWED_HOSTS=""), raise error.
    raise ValueError("ALLOWED_HOSTS cannot be empty in production.")

# Production Security Settings
if APP_MODE == 'production':  # Or simply `if not DEBUG:`
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    # HSTS Settings - uncomment and configure carefully after ensuring full site HTTPS compatibility
    # SECURE_HSTS_SECONDS = 31536000  # 1 year
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True

    # It's also good practice to set X_FRAME_OPTIONS, though Django does this by default.
    # X_FRAME_OPTIONS = 'DENY' # Default is 'DENY'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'converter_app',  # Our new app
]

MIDDLEWARE = [
    'converter_app.middleware.RequestIdMiddleware',  # Added RequestIdMiddleware
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Database configuration using dj-database-url
# Reads the DATABASE_URL environment variable
DATABASES = {
    'default': dj_database_url.config(
        conn_max_age=600,  # Optional: recommended for persistent connections
        ssl_require=True   # Ensures SSL is enforced as per NeonDB URI
    )
}

# Optional safety check: Ensure the engine is PostgreSQL if dj-database-url didn't set it explicitly
# (dj-database-url usually handles this based on the URI scheme 'postgresql://')
if DATABASES['default'].get('ENGINE') != 'django.db.backends.postgresql':
    DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Directory where Django's collectstatic will gather all static files for deployment.
# This path should align with the 'distDir' configuration in vercel.json (or its subdirectories).
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Additional locations of static files (e.g., a project-level 'static' folder)
# Django will look for static files in these directories in addition to app-specific 'static' folders.
STATICFILES_DIRS = []

# Whitenoise configuration for serving static files in production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Logging Configuration
# ------------------------------------------------------------------------------
# Logging Configuration
# ------------------------------------------------------------------------------

# Base LOGGING config (for production / console-only)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json_formatter': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(asctime)s %(levelname)s %(name)s %(module)s %(funcName)s %(lineno)d %(message)s %(request_id)s'
        },
        'simple_console_formatter': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{asctime}] {levelname} {module}.{funcName}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console_json': {  # For production console (Vercel)
            'class': 'logging.StreamHandler',
            'level': 'INFO',
            'formatter': 'json_formatter',
        },
        # 'console_dev' and 'rotating_file_json' will be added if DEBUG is True
    },
    'loggers': {
        'django': {
            'handlers': ['console_json'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console_json'],
            'level': 'ERROR',
            'propagate': False,
        },
        'converter_app': {  # Your application logger
            'handlers': ['console_json'],
            'level': 'INFO', # Default to INFO for app in production
            'propagate': False,
        },
    },
}

if DEBUG:
    LOG_DIR = BASE_DIR / 'logs'
    os.makedirs(LOG_DIR, exist_ok=True) # Create log directory only in development

    # Add development-specific handlers
    LOGGING['handlers']['console_dev'] = {
        'class': 'logging.StreamHandler',
        'level': 'DEBUG',
        'formatter': 'simple_console_formatter',
    }
    LOGGING['handlers']['rotating_file_json'] = {
        'class': 'logging.handlers.RotatingFileHandler',
        'level': 'DEBUG',
        'formatter': 'json_formatter',
        'filename': LOG_DIR / 'app.log.json',
        'maxBytes': 10 * 1024 * 1024,  # 10MB
        'backupCount': 5,
    }

    # Update loggers to use development handlers
    LOGGING['loggers']['django']['handlers'] = ['console_dev', 'rotating_file_json']
    LOGGING['loggers']['django.request']['handlers'] = ['console_dev', 'rotating_file_json']
    # Optionally make django.request more verbose in dev if needed
    # LOGGING['loggers']['django.request']['level'] = 'DEBUG'
    LOGGING['loggers']['converter_app']['handlers'] = ['console_dev', 'rotating_file_json']
    LOGGING['loggers']['converter_app']['level'] = 'DEBUG'
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Google OAuth Client Configuration (loaded from environment variables)
# These are required for the Google Sheets integration.
# Ensure these environment variables are set in your deployment environment.
# For local development, you can add them to your .env file.
# ------------------------------------------------------------------------------
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')
GOOGLE_TOKEN_URI = os.getenv(
    'GOOGLE_TOKEN_URI', 'https://oauth2.googleapis.com/token')  # Default if not set
GOOGLE_AUTH_URI = os.getenv(
    'GOOGLE_AUTH_URI', 'https://accounts.google.com/o/oauth2/auth')  # Default if not set
# GOOGLE_REDIRECT_URIS might also be needed if you construct the Flow object manually
# from client_config dict rather than from_client_secrets_file,
# but for now, the redirect_uri is built dynamically in views.py.

if APP_MODE == 'production':  # Or simply `if not DEBUG:`
    if not GOOGLE_CLIENT_ID:
        raise ValueError(
            "GOOGLE_CLIENT_ID environment variable must be set in production.")
    if not GOOGLE_CLIENT_SECRET:
        raise ValueError(
            "GOOGLE_CLIENT_SECRET environment variable must be set in production.")
# ------------------------------------------------------------------------------
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'